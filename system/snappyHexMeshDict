/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Which of the steps to run
castellatedMesh true;
snap            true;
addLayers       false;


// Geometry. Definition of all surfaces. All surfaces are of class
// searchableSurface.
// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface
geometry
{
    gore.stl
    {
        type triSurfaceMesh;
        name walls;
    }

    all
    {
        type    box;
        min     (-1e6 -1e6 -1e6);
        max     ( 1e6  1e6  1e6);
    }
}


// Settings for the castellatedMesh generation.
castellatedMeshControls
{

    // Refinement parameters
    // ~~~~~~~~~~~~~~~~~~~~~

    // If local number of cells is >= maxLocalCells on any processor
    // switches from refinement followed by balancing
    // (current method) to (weighted) balancing before refinement.
    maxLocalCells 2000000;

    // Overall cell limit (approximately). Refinement will stop immediately
    // upon reaching this number so a refinement level might not complete.
    // Note that this is the number of cells before removing the part which
    // is not 'visible' from the keepPoint. The final number of cells might
    // actually be a lot less.
    maxGlobalCells 8000000;

    // The surface refinement loop might spend lots of iterations refining just a
    // few cells. This setting will cause refinement to stop if <= minimumRefine
    // are selected for refinement. Note: it will at least do one iteration
    // (unless the number of cells to refine is 0)
    minRefinementCells 4;

    // Number of buffer layers between different levels.
    // 1 means normal 2:1 refinement restriction, larger means slower
    // refinement.
    nCellsBetweenLevels 1;



    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies a level for any cell intersected by its edges.
    // This is a featureEdgeMesh, read from constant/triSurface for now.
    features
    (
        
        {
            file "gore.eMesh";
            level 6;
        }
        
    );



    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.

    refinementSurfaces
    {
        walls 
        {
            // Surface-wise min and max refinement level
            level (6 6);
        }
    }
    // Resolve sharp angles
    // Note - setting this too low may cause issues near low-poly circles / curves.
    // This warning also applies to the surfaceFeatureExtract utility.
    resolveFeatureAngle 25;

    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.

    refinementRegions
    {
        /*
        all
        {
            mode        inside;
            levels      ((100 1));
        }
        */
        walls
        {
            mode        distance;
            levels      ((0.0003 5) (0.001 4) (0.003 3)); // was ((0.002 2))
            // Args: gapLevel (n minLevel maxLevel)
            // n = minimum number of cells across a gap
            // minLevel = minimum refinement level of candidate cells
            // maxLevel = maximum refinement level of candidate cells
            //
            // Usage: e.g. (3 0 5) - refine cells which satisfy:
            // - less than 3 cells across a gap
            // - at least refinement level 0
            // - at most refinement level 5
            
            //gapLevel    (4 0 3);
            //gapMode     mixed;
        }
    }


    // Mesh selection
    // ~~~~~~~~~~~~~~

    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the locationInMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    //locationInMesh (0.14 -0.000001 0.1);
    locationInMesh (1e-6 1e-6 -1e-2);

    // Whether any faceZones (as specified in the refinementSurfaces)
    // are only on the boundary of corresponding cellZones or also allow
    // free-standing zone faces. Not used if there are no faceZones.
    allowFreeStandingZoneFaces false;
}



// Settings for the snapping.
snapControls
{
    //- Number of patch smoothing iterations before finding correspondence
    //  to surface.
    //  Note: this works well near smooth curves, but not near corners.
    //  This will frequently cause highly distorted cells near corners.
    nSmoothPatch 3; // was 3

    //- Number of internal smoothing iterations to reduce non-orthogonality
    //  at split / refined faces (making faces non-planar). Default 0. 
    nSmoothInternal 3;

    //- Relative distance for points to be attracted by surface feature point
    //  or edge. True distance is this factor times local
    //  maximum edge length. Values below 0.9 can result in separation between
    //  the mesh and the surface / edge, and longer meshing time.
    tolerance 1.0; // was 2.0

    //- Number of mesh displacement iterations.
    nSolveIter 30; // was 30

    //- Maximum number of snapping relaxation iterations. Should stop
    //  before upon reaching a correct mesh.
    nRelaxIter 8; // was 5

    //- Number of feature edge snapping iterations.
    //  Leave out altogether to disable.
    //  Note - raising this can result in oversnapping, i.e. two layers of cells
    //  nearby an edge will be snapped to the edge, resulting in very poor cells
    //  near that region! Use the smallest setting possible here.
    //  If a higher setting is necessary, lowering the tolerance setting helps
    //  reduce the distortion.
    //  Absolute minimum useable value = 8. (with tolerance = 2.0)
    nFeatureSnapIter 10; // was 10

    //- Detect (geometric) features by sampling the surface (default=false)
    //  Typically this results in worse edges - just use explicit instead.
    implicitFeatureSnap false;

    //- Use castellatedMeshControls::features (default = true)
    explicitFeatureSnap true;

    //- When using explicitFeatureSnap and this is switched on,
    //  features between multiple surfaces will be captured. Useful for
    //  multi-region meshing where internal mesh must conform to
    //  the region boundaries. Default false.
    multiRegionFeatureSnap false;

    //- See User Guide for more details. Helps with layer addition.
    //  User guide recommends value of 1/2 nFeatureSnapIter. Default = -1.
    //  Personally have found a value equal to nFeatureSnapIter works well,
    //  although to be honest I don't see the point of using this.
    //nFaceSplitInterval 10;

    //- Releasing attraction close to a fature to allow more freedom
    //  for displacement. Default is false.
    //  Caution: this feature can create very badly distorted cells.
    releasePoints false;

    //- Avoid attraction of points across the diagonal of the face, which
    //  would result in a collapsed face. Default is false
    //  Caution: this feature can create very badly distorted cells.
    avoidDiagonal false;
}



// Settings for the layer addition.
addLayersControls
{
    // Are the thickness parameters below relative to the undistorted
    // size of the refined cell outside layer (true) or absolute sizes (false).
    relativeSizes false;

    // Per final patch (so not geometry!) the layer information
    layers
    {
    
        walls
        {
            nSurfaceLayers  3; // was 4
        }

    }

    // Expansion factor for layer mesh
    //expansionRatio 1.5;

    // Wanted thickness of final added cell layer. If multiple layers
    // is the thickness of the layer furthest away from the wall.
    // Relative to undistorted size of cell outside layer.
    // is the thickness of the layer furthest away from the wall.
    // See relativeSizes parameter.
   
    // BEWARE! FUNKY BEHAVIOUR AHEAD!
    // There is a bug in this code - when using the combination of final & first
    // layer thickness as well as relativeSizes false, finalLayerThickness is
    // still done in terms of relative sizes, even though relativeSizes is false.
    // However, this does not happen if the combination of finalLayerThickness
    // and expansionRatio is used - in that case, the expected behaviour occurs.
    //
    // E.g. if you use final = 1e-3, first = 3e-4, you will end up with the final
    // cell having an edge length 1e-3 times the local cell length, but the first
    // cell having an edge length of 3e-4 m. 
    //
    // It seems at least one variable is always relative. Very odd.

    finalLayerThickness 0.3; // was 5e-4 

    firstLayerThickness 1e-4; // was 1e-4 / 0.08

    // Minimum thickness of cell layer. If for any reason layer
    // cannot be above minThickness do not add layer.
    // Relative to undistorted size of cell outside layer.
    // See relativeSizes parameter.
    minThickness 0.5e-4; // 0.5e-4

    // If points get not extruded do nGrow layers of connected faces that are
    // also not grown. This helps convergence of the layer addition process
    // close to features.
    // Note: changed(corrected) w.r.t 1.7.x! (didn't do anything in 1.7.x)
    nGrow 0;


    // Advanced settings

    // When not to extrude surface. 0 is flat surface, 90 is when two faces
    // are perpendicular
    featureAngle 120; // was 120

    // Angle below which to merge faces which are on the same patch and same cell.
    // Higher = typically easier for layers to be added, but lowers quality,
    // especially near corners / edges. Can cause layer collapse near corners.
    mergePatchFacesAngle 20; // was 60 
    
    // See user guide for more details.
    slipFeatureAngle 180; 
    
    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter 5;

    // Number of smoothing iterations of surface normals
    nSmoothSurfaceNormals 3; // was 1

    // Number of smoothing iterations of interior mesh movement direction
    nSmoothNormals 0; // was 3

    // Smooth layer thickness over surface patches
    nSmoothThickness 0; // was 10

    // Stop layer growth on highly warped cells
    maxFaceThicknessRatio 0.5;

    // Reduce layer growth where ratio thickness to medial
    // distance is large
    maxThicknessToMedialRatio 0.3;

    // Angle used to pick up medial axis points
    // Note: changed(corrected) w.r.t 16x! 90 degrees corresponds to 130 in 16x.
    minMedialAxisAngle 90;

    // Create buffer region for new layer terminations
    nBufferCellsNoExtrude 0;


    // Overall max number of layer addition iterations. The mesher will exit
    // if it reaches this number of iterations; possibly with an illegal
    // mesh.
    nLayerIter 25;

    // Settings for using a custom displacementMotionSolver. Must also add
    // relevant settings in fvSolution (and fvSchemes if default laplacian
    // is not set). See user guide for more info.

    meshShrinker    displacementMotionSolver;
    solver          displacementLaplacian;
    displacementLaplacianCoeffs
    {
        diffusivity     quadratic inverseDistance 1(wall);
    }

}



// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
    #include "meshQualityDict"

    // Advanced

    //- Number of error distribution iterations
    nSmoothScale 4;
    //- amount to scale back displacement at error points
    errorReduction 0.75;
}


// Advanced

// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-7;

writeFlags
(
    scalarLevels    // write volScalarField with cellLevel for postprocessing
    //layerSets       // write cellSets, faceSets of faces in layer
    //layerFields     // write volScalarField for layer coverage
);

debugFlags
(
//    mesh            // Write intermediate meshes
//    intersections   // Write current mesh intersections as .obj
//    featureSeeds    // Write information about explicit feature edge refinement
//    attraction      // Write attraction as .obj
//    layerInfo       // Write information about layers
);



// ************************************************************************* //
