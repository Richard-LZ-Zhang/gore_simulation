/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  8                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      extrudeMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// What to extrude:
//      patch   : from patch of another case ('sourceCase')
//      mesh    : as above but with original case included
//      surface : from externally read surface

//constructFrom mesh;
constructFrom patch;

// If construct from patch/mesh:
sourceCase ".";
//sourcePatches (back);
sourcePatches (minX);


// If construct from patch: patch to use for back (can be same as sourcePatch)
exposedPatchName maxX;

// Flip surface normals before usage. Valid only for extrude from surface or
// patch.
flipNormals true;//false;

//- Wedge extrusion. If nLayers is 1 assumes symmetry around plane.
extrudeModel        sector;//wedge;

nLayers             5;//1;

expansionRatio      1;//0.002; 

sectorCoeffs
{
    axisPt      (0 0 0);
    axis        (0 1 0);
    angle      -30;  // For nLayers=1 assume symmetry so angle/2 on each side
}

// Do front and back need to be merged? Usually only makes sense for 360
// degree wedges.
mergeFaces false;   //true;

// Merge small edges. Fraction of bounding box.
mergeTol 1e-6;


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
